import React, { useState, useEffect } from "react";
import { motion } from "motion/react";
import {
  ArrowLeft,
  QrCode,
  Copy,
  Smartphone,
  Check,
  DollarSign,
} from "lucide-react";
import { Button } from "../../../../components/ui/button";
import { Card } from "../../../../components/ui/card";
import { MaskedInput } from "../../../shared/components/ui/MaskedInput";
import { toast } from "sonner@2.0.3";
import QRCode from "react-qr-code";

interface PixDepositProps {
  onBack: () => void;
  onComplete: () => void;
}

type PixStep = "amount" | "method" | "qr-code" | "pix-key";

export const PixDeposit: React.FC<PixDepositProps> = ({
  onBack,
  onComplete,
}) => {
  const [currentStep, setCurrentStep] = useState<PixStep>("amount");
  const [amount, setAmount] = useState("");
  const [selectedMethod, setSelectedMethod] = useState<"qr" | "key" | null>(
    null
  );
  const [copiedKey, setCopiedKey] = useState<null | "id" | "email">(null);

  const [userId, setUserId] = useState<string | null>(null);

  useEffect(() => {
    try {
      const userDataString = localStorage.getItem("swapin_user");
      if (userDataString) {
        const userData = JSON.parse(userDataString);
        setUserId(userData.id); // Pega o ID do usuário
      }
    } catch (error) {
      console.error("Erro ao ler dados do usuário do localStorage:", error);
    }
  }, []); // O array vazio [] garante que isso rode apenas uma vez

  const handleAmountNext = () => {
    if (
      !amount ||
      parseFloat(amount.replace(/[^\d,]/g, "").replace(",", ".")) <= 0
    ) {
      toast.error("Digite um valor válido");
      return;
    }
    setCurrentStep("method");
  };

  const handleMethodSelect = (method: "qr" | "key") => {
    setSelectedMethod(method);
    if (method === "qr") {
      setCurrentStep("qr-code");
    } else {
      setCurrentStep("pix-key");
    }
  };

  // Remova a função antiga 'copyPixKey' inteira.

  // Adicione esta nova função:
  const handleCopyToClipboard = (
    text: string | null,
    keyType: "id" | "email"
  ) => {
    if (!text) return; // Não faz nada se o texto for nulo (ex: userId carregando)

    navigator.clipboard.writeText(text);
    toast.success("Copiado para a área de transferência!");
    setCopiedKey(keyType);
    setTimeout(() => setCopiedKey(null), 2000); // Reseta o ícone após 2 segundos
  };

  const handleComplete = () => {
    const numericAmount = parseFloat(
      amount.replace(/[^\d,]/g, "").replace(",", ".")
    );
    toast.success(
      `Depósito de R$ ${numericAmount.toLocaleString("pt-BR", {
        minimumFractionDigits: 2,
      })} confirmado!`
    );
    onComplete();
  };

  const formatPixKey = "swapin@pix.com.br";
  const numericAmount = amount
    ? parseFloat(amount.replace(/[^\d,]/g, "").replace(",", "."))
    : 0;

  // Mock QR Code data - in production this would be generated by backend
  const qrCodeData = `00020126850014br.gov.bcb.pix0136swapin@pix.com.br0218Deposito Swapin5204000053039865802BR5913SWAPIN LTDA6009SAO PAULO62070503***6304${Math.random()
    .toString(36)
    .substr(2, 4)
    .toUpperCase()}`;

  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    // 1. Pega o valor do input e remove tudo que não for dígito
    const rawValue = e.target.value.replace(/\D/g, "");

    // Se o valor estiver vazio, limpa o estado
    if (!rawValue) {
      setAmount("");
      return;
    }

    // 2. Converte o valor de centavos para a unidade principal (ex: 12345 -> 123.45)
    const numericValue = parseFloat(rawValue) / 100;

    // 3. Formata o número para o padrão de moeda brasileiro (BRL)
    const formattedValue = new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL",
    }).format(numericValue);

    // 4. Atualiza o estado com o valor formatado
    setAmount(formattedValue);
  };

  const renderAmountStep = () => (
    <div className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <Button
          onClick={onBack}
          variant="outline"
          size="sm"
          className="border-gray-600"
        >
          <ArrowLeft className="w-4 h-4" />
        </Button>
        <div>
          <h1 className="text-2xl font-bold text-white">Depósito via PIX</h1>
          <p className="text-gray-300">Digite o valor que deseja receber</p>
        </div>
      </div>

      <Card className="backdrop-blur-md bg-white/10 border-white/20 p-6 space-y-6">
        <div className="text-center mb-6">
          <div className="w-16 h-16 rounded-full bg-green-600/20 flex items-center justify-center mx-auto mb-4">
            <DollarSign className="w-8 h-8 text-green-400" />
          </div>
          <h2 className="text-xl font-semibold text-white mb-2">
            Qual valor deseja receber?
          </h2>
          <p className="text-gray-300">
            O dinheiro estará disponível na sua conta em instantes
          </p>
        </div>

        <div className="space-y-4">
          <div>
            <label className="text-white font-medium mb-2 block">
              Valor do depósito
            </label>
            <input
              type="text"
              inputMode="decimal" // Melhora a experiência em teclados de celular
              placeholder="R$ 0,00"
              value={amount}
              onChange={handleAmountChange}
              className="w-full bg-gray-800/50 border-gray-600 text-white rounded-lg text-lg h-14 px-4 focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
            />
          </div>

          {/* Quick amount buttons */}

          <Button
            onClick={handleAmountNext}
            className="w-full bg-green-600 hover:bg-green-700 py-3"
            disabled={!amount}
          >
            Continuar
          </Button>
        </div>
      </Card>
    </div>
  );

  const renderMethodStep = () => (
    <div className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <Button
          onClick={() => setCurrentStep("amount")}
          variant="outline"
          size="sm"
          className="border-gray-600"
        >
          <ArrowLeft className="w-4 h-4" />
        </Button>
        <div>
          <h1 className="text-2xl font-bold text-white">Como prefere pagar?</h1>
          <p className="text-gray-300">
            Escolha a forma mais conveniente para você
          </p>
        </div>
      </div>

      <div className="space-y-4">
        <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
          <Card
            className="backdrop-blur-md bg-white/10 border-white/20 p-6 cursor-pointer transition-all hover:bg-white/15"
            onClick={() => handleMethodSelect("qr")}
          >
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 rounded-xl bg-green-600 flex items-center justify-center">
                <QrCode className="w-6 h-6 text-white" />
              </div>
              <div className="flex-1">
                <h3 className="text-white font-semibold mb-1">QR Code</h3>
                <p className="text-gray-300 text-sm">
                  Escaneie o código QR com seu app
                </p>
              </div>
              <ArrowLeft className="w-5 h-5 text-gray-400 rotate-180" />
            </div>
          </Card>
        </motion.div>

        <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
          <Card
            className="backdrop-blur-md bg-white/10 border-white/20 p-6 cursor-pointer transition-all hover:bg-white/15"
            onClick={() => handleMethodSelect("key")}
          >
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 rounded-xl bg-blue-600 flex items-center justify-center">
                <Smartphone className="w-6 h-6 text-white" />
              </div>
              <div className="flex-1">
                <h3 className="text-white font-semibold mb-1">Chave PIX</h3>
                <p className="text-gray-300 text-sm">
                  Copie nossa chave PIX para transferir
                </p>
              </div>
              <ArrowLeft className="w-5 h-5 text-gray-400 rotate-180" />
            </div>
          </Card>
        </motion.div>
      </div>
    </div>
  );

  const renderQRCodeStep = () => (
    <div className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <Button
          onClick={() => setCurrentStep("method")}
          variant="outline"
          size="sm"
          className="border-gray-600"
        >
          <ArrowLeft className="w-4 h-4" />
        </Button>
        <div>
          <h1 className="text-2xl font-bold text-white">QR Code PIX</h1>
          <p className="text-gray-300">
            Escaneie o código com seu app do banco
          </p>
        </div>
      </div>

      <Card className="backdrop-blur-md bg-white/10 border-white/20 p-6 space-y-6">
        {/* Amount display */}
        <div className="text-center border-b border-gray-600 pb-4">
          <p className="text-gray-300 mb-1">Valor do depósito</p>
          <p className="text-3xl font-bold text-green-400">
            R${" "}
            {numericAmount.toLocaleString("pt-BR", {
              minimumFractionDigits: 2,
            })}
          </p>
        </div>

        {/* QR Code */}
        <div className="flex justify-center">
          <div className="w-64 h-64 bg-white rounded-xl p-4">
            {/* Contêiner com tamanho flexível para preencher o espaço branco */}
            <div className="w-full h-full">
              {userId ? (
                <QRCode
                  value={userId}
                  size={256} // Resolução interna para maior nitidez
                  style={{ height: "auto", maxWidth: "100%", width: "100%" }}
                />
              ) : (
                // Placeholder de carregamento
                <div className="w-full h-full flex items-center justify-center bg-gray-100 rounded-md">
                  <p className="text-sm text-gray-500">Carregando QR Code...</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Instructions */}
        <div className="bg-blue-500/10 border border-blue-500/20 rounded-xl p-4">
          <h3 className="text-blue-300 font-medium mb-2">Como pagar:</h3>
          <ol className="text-blue-200 text-sm space-y-1">
            <li>1. Abra o app do seu banco</li>
            <li>2. Escolha a opção PIX</li>
            <li>3. Escaneie este QR Code</li>
            <li>4. Confirme o pagamento</li>
          </ol>
        </div>

        <Button
          onClick={handleComplete}
          className="w-full bg-green-600 hover:bg-green-700 py-3"
        >
          Já fiz o pagamento
        </Button>
      </Card>
    </div>
  );

  const renderPixKeyStep = () => (
    <div className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <Button
          onClick={() => setCurrentStep("method")}
          variant="outline"
          size="sm"
          className="border-gray-600"
        >
          <ArrowLeft className="w-4 h-4" />
        </Button>
        <div>
          <h1 className="text-2xl font-bold text-white">Chave PIX</h1>
          <p className="text-gray-300">Use nossa chave PIX para transferir</p>
        </div>
      </div>

      <Card className="backdrop-blur-md bg-white/10 border-white/20 p-6 space-y-6">
        {/* Amount display */}
        <div className="text-center border-b border-gray-600 pb-4">
          <p className="text-gray-300 mb-1">Valor do depósito</p>
          <p className="text-3xl font-bold text-green-400">
            R${" "}
            {numericAmount.toLocaleString("pt-BR", {
              minimumFractionDigits: 2,
            })}
          </p>
        </div>

        {/* --- NOVO BLOCO: PIX Copia e Cola (ID do Usuário) --- */}
        <div className="bg-gray-800/50 rounded-xl p-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-300 font-medium">PIX Copia e Cola</span>
            <span className="text-blue-400 text-sm">ID da Transação</span>
          </div>
          <div className="flex items-center gap-3">
            <code className="flex-1 text-white bg-gray-900 px-3 py-2 rounded-lg font-mono text-xs truncate">
              {/* Mostra o ID do usuário ou uma mensagem de carregamento */}
              {userId || "Carregando ID..."}
            </code>
            <Button
              size="sm"
              variant="outline"
              onClick={() => handleCopyToClipboard(userId, "id")}
              disabled={!userId} // O botão fica desabilitado até o ID carregar
              className={`${
                copiedKey === "id"
                  ? "bg-green-600 border-green-600 text-white"
                  : "border-gray-600"
              } transition-colors`}
            >
              {copiedKey === "id" ? (
                <Check className="w-4 h-4" />
              ) : (
                <Copy className="w-4 h-4" />
              )}
            </Button>
          </div>
        </div>

        {/* PIX Key (E-mail) - Bloco já existente, mas atualizado */}
        <div className="bg-gray-800/50 rounded-xl p-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-300 font-medium">
              Chave PIX Alternativa
            </span>
            <span className="text-blue-400 text-sm">E-mail</span>
          </div>
          <div className="flex items-center gap-3">
            <code className="flex-1 text-white bg-gray-900 px-3 py-2 rounded-lg font-mono">
              {formatPixKey}
            </code>
            <Button
              size="sm"
              variant="outline"
              onClick={() => handleCopyToClipboard(formatPixKey, "email")}
              className={`${
                copiedKey === "email"
                  ? "bg-green-600 border-green-600 text-white"
                  : "border-gray-600"
              } transition-colors`}
            >
              {copiedKey === "email" ? (
                <Check className="w-4 h-4" />
              ) : (
                <Copy className="w-4 h-4" />
              )}
            </Button>
          </div>
        </div>

        {/* Bank details (sem alteração) */}
        <div className="bg-gray-800/30 rounded-xl p-4 space-y-3">
          <h3 className="text-white font-medium">Dados para transferência:</h3>
          <div className="grid grid-cols-2 gap-3 text-sm">
            <div>
              <span className="text-gray-400">Favorecido:</span>
              <p className="text-white">Swapin Ltda</p>
            </div>
            <div>
              <span className="text-gray-400">CNPJ:</span>
              <p className="text-white">12.345.678/0001-90</p>
            </div>
          </div>
        </div>

        {/* Instructions (com pequena alteração para incluir a nova opção) */}
        <div className="bg-blue-500/10 border border-blue-500/20 rounded-xl p-4">
          <h3 className="text-blue-300 font-medium mb-2">Como pagar:</h3>
          <ol className="text-blue-200 text-sm space-y-1">
            <li>1. Copie o **PIX Copia e Cola** ou a chave alternativa</li>
            <li>2. Abra o app do seu banco e escolha a opção PIX</li>
            <li>3. Cole o código/chave e confirme os dados</li>
            <li>4. Verifique o valor e finalize o pagamento</li>
          </ol>
        </div>

        <Button
          onClick={handleComplete}
          className="w-full bg-green-600 hover:bg-green-700 py-3"
        >
          Já fiz o pagamento
        </Button>
      </Card>
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case "amount":
        return renderAmountStep();
      case "method":
        return renderMethodStep();
      case "qr-code":
        return renderQRCodeStep();
      case "pix-key":
        return renderPixKeyStep();
      default:
        return renderAmountStep();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.3 }}
    >
      {renderCurrentStep()}
    </motion.div>
  );
};
